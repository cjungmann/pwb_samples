#!/usr/bin/env bash

# This script uses `pwb` for presenting a set of scripts that
# demonstrate various concepts in developing applications with the
# tool.

enable pwb

source <( pwb_sources \
              pwb_exit_on_error \
              pwb_get_regions   \
              pwb_print_array   \
              pwb_conduct_dialog \
              pwb_print_message \
              pwb_erase_dims    \
        )

##############################
###    DATA ACQUISITION    ###
##############################

declare TUT_PATH=$( dirname $( realpath "$0" ) )/pwb_tutorial.d

get_max_line_width()
{
    local name_return="$1"
    local -n gmlw_maxlen="$name_return"

    local data_name="$2"
    local -n gmlw_array="$data_name"

    gmlw_maxlen=0
    local -i curlen

    for name in "${gmlw_array[@]}"; do
        curlen="${#name}"
        (( gmlw_maxlen = (curlen > gmlw_maxlen ? curlen : gmlw_maxlen) ))
    done
}

read_tutorial_summary()
{
    local -n rts_array="$1"
    local file_name="${TUT_PATH}/$2"
    local -i doc_status=0

    while read -r; do
        case "$doc_status" in
            0 )
                if [[ "$REPLY" == \#\#\ BEGIN_DOC ]]; then
                    (( ++doc_status ))
                fi
                ;;
            1 )
                if [[ "$REPLY" == \#\#\ END_DOC ]]; then
                    (( ++doc_status ))
                else
                    rts_array+=( "${REPLY:3}" )
                fi
                ;;
        esac
    done < "$file_name"
}

####################################
###    PWB CALLBACK FUNCTIONS    ###
####################################

print_line()
{
    local -i index="$1"
    local data_name="$2"
    local -i chars_limit="$3"

    local -n dsource="$data_name"

    local name="${dsource[$index]}"

    printf -v tline "%-*s %d" "$chars_limit" "$name" "$chars_limit"
    printf "%s" "${tline:0:$chars_limit}"
}

execute_id_file()
{
    printf -v msg $'File \e[32;1m%s\e[39m' "$1"
    local -a lines=(
        "$msg"
        ""
        "Press any key to continue"
    )

    pwb_conduct_dialog lines PHANDLE
}

show_help()
{
    local -a msg=(
        " Arrow and page keys to navigate "
        ""
        $' \e[32;1mENTER\e[39m to execute script '
        $' \e[32;1mv\e[39m to view source code '
        $' \e[32;1mi\e[39m for script information '
        $' \e[32;1mm\e[39m for man page of the script'
        ""
        $' \e[32;1m?\e[39m to show this help page '
        $' \e[32;1mq\e[39m to quit '
        ""
        " Press any key to continue "
    )

    pwb_conduct_dialog msg PHANDLE
}

execute_line()
{
    local keyp="$1"
    local -i index="$2"
    local data_name="$3"
    local pwb_name="$4"

    local -n dsource="$data_name"
    local fpath="${TUT_PATH}/${dsource[$index]}"

    case "$keyp" in
        $'\cm') "$fpath" ;;
        'i'   ) execute_id_file "$fpath" ;;
        '?'   ) show_help ;;

        # For next items, facilitate full-screen use with restore and init:
        'm'   )
            pwb restore
            man -l "${fpath}.7"
            pwb init
            ;;
        'v'   )
            pwb restore
            less "$fpath"
            pwb init
            ;;
    esac

    restore_window "$pwb_name"
}

print_right_margin()
{
    local -i index="$1"
    local data_name="$2"

    local -n dsource="$data_name"

    local filename="${dsource[$index]}"
    local -a prm_array=( "Script Summary" "" )
    read_tutorial_summary prm_array "$filename"

    printf -v prm_array["${#prm_array[*]}"] "%*s" 60 " "

    pwb_print_array prm_array \
                    -t "${REGION_DIMS[RM_TOP]}"   \
                    -l "${REGION_DIMS[RM_LEFT]}"  \
                    -w "${REGION_DIMS[RM_WIDE]}"  \
                    -c "${REGION_DIMS[RM_LINES]}" \
                    -j l
}

print_head()
{
    print_centered()
    {
        local -i row="$1"
        local msg="$2"
        local -i left
        (( left = ( REGION_DIMS[SC_WIDE] - ${#msg} ) / 2 ))
        printf $'\e[%d;%dH\e[2K%s' "$row" "$left" "$msg"
    }

    printf $'\e[48;2;32;32;32m'
    print_centered 1 "PWB Development Tutorial"
    print_centered 2 "Press '?' for help, 'q' to quit"
    printf $'\e[49m'
}

#########################
###   MISCELLANEOUS   ###
#########################

message_dialog()
{
    local -a md_cmd_args=( "$@" )
    local -a md_dims
    pwb_print_message -a md_dims md_cmd_args
    read -sn1
    pwb_erase_dims md_dims
}

# Prepare the pwb handle with margins to center the content:
prepare_margins()
{
    local pwb_handle="$1"
    local data_name="$2"

    local -i maxlen
    get_max_line_width maxlen "$data_name"

    pwb get_dimensions "$pwb_handle"

    local -i swide="${PWB_ASSOC[screen_cols]}"
    local -i left_margin=2
    local -i right_margin=$(( swide - maxlen - 2 ))

    pwb set_margins "$pwb_handle" 3 "$right_margin" 1 "$left_margin"
    pwb_exit_on_error
}

# Non managed margins will not be automatically reploted with
# `pwb print_all`, so this function restores the static top
# margin after a full screen erase.  The content and managed
# right margin will be handled by PWB.
restore_window()
{
    local pname="$1"
    printf $'\e[2J'
    print_head "$pname"
    pwb print_all "$pname"
}

exit_trap() { pwb restore; }

#############################
###    BEGIN EXECUTION    ###
#############################

## Color constants
declare COL_DIR=$'\e[34;1m'
declare COL_LINK=$'\e[38;2;64;255;192m'

## Prepare the data source
declare -a TUT_LIST=(
    introduction
    margins
    sources
    ls
    keymap
)

declare PHANDLE
pwb declare PHANDLE   \
    TUT_LIST          \
    "${#TUT_LIST[*]}" \
    print_line        \
    -e execute_line   \
    -r print_right_margin

prepare_margins PHANDLE TUT_LIST

# Prepare global hash table for margin dimensions
declare -A REGION_DIMS
pwb_get_regions REGION_DIMS PHANDLE
pwb_exit_on_error

# Keymap for special action
declare -a keymap=(
    $'\cm'     7    # enter key to execute
    'm'        7    # show the associated man page
    'i'        7    # i key for information
    'v'        7    # v key to view
    '?'        7    # show help
)
declare KEYMAP
pwb declare_keymap KEYMAP keymap
pwb_exit_on_error


trap exit_trap EXIT SIGINT SIGABRT


#5 Start the interaction
pwb init
print_head

pwb start PHANDLE -a KEYMAP

