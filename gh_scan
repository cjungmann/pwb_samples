#!/usr/bin/env bash

enable $( enable_ate )
source $( ate_sources ate_exit_on_error )

enable $( enable_pwb )
source $( pwb_sources pwb_exit_on_error )

get_repos()
{
    local table_name="$1"
    ate get_row_size "$table_name" -v row_size
    ate_exit_on_error
    if [ "$row_size" -ne 4 ]; then
        echo "Incorrect table row size."
        exit
    fi

    local array_name
    ate get_array_name "$table_name" -v array_name
    ate_exit_on_error

    local -n gt_array="$array_name"

    local OIFS="$IFS"
    local IFS=$'\t'
    local -a cur
    local -i el_count line_count=0
    while read -r; do
        (( ++line_count ))
        IFS=$'\t' read -r -a cur <<< "$REPLY"
        el_count="${#cur[*]}"
        if [ "$el_count" -eq 4 ]; then
            gt_array+=( "${cur[@]}" )
        elif [ "$el_count" -eq 3 ]; then
            # If missing description, add blank element to fill out record
            gt_array+=( "${cur[0]}" "" "${cur[@]:1}" )
        else
            echo "at source line ${line_count}, the record has $el_count elements  when it should have $row_size"
            echo "$REPLY"
            exit
        fi
    done < <( gh repo list -L 1000 )

    ate index_rows "$table_name"
    ate_exit_on_error
}

repo_view_print_line()
{
    local -i index="$1"
    local tname="$2"
    local -i char_limit="$3"

    local -a row
    ate get_row "$tname" "$index" -a row
    ate_exit_on_error

    local kind="${row[2]}"
    local -i private=0
    local -i forked=0

    if [[ "$kind" =~ "private" ]]; then
        private=1
        printf $'\e[31;1m'
    fi

    if [[ "$kind" =~ "forked" ]]; then
        forked=1
        printf $'\e[43;1m'
    fi


    printf -v tline "%-*s" "$char_limit" "${row[0]}"
    printf "${tline:0:$char_limit}"

    printf $'\e[m'
}

repo_view_print_head()
{
    local -i index="$1"
    local tname="$2"
    local -i char_limit="$3"

    local -a row
    ate get_row "$tname" "$index" -a row
    ate_exit_on_error

    printf -v tline "%-20s   %-*s" "${row[3]}" "$char_limit" "${row[2]}"
    printf "${tline:0:$char_limit}\n"
    printf -v tline "%-*s" "$char_limit" "${row[1]}"
    printf "${tline:0:$char_limit}\n"
}
##########################
### Setup Global Table ###
##########################

declare repo_table
ate declare repo_table 4
ate_exit_on_error

get_repos repo_table

ate get_row_count repo_table -v row_count
ate_exit_on_error

##############################
### Setup and Start Viewer ###
##############################

declare repo_view
pwb declare repo_view repo_table "$row_count" repo_view_print_line -t repo_view_print_head
pwb set_margins repo_view 5 10 2

pwb init
pwb start repo_view
pwb restore
