#!/usr/bin/env bash

enable ate
source <( pwb_sources \
              ate_confirm_functions  \
              ate_exit_on_error      \
              ate_mimes              \
              ate_survey_tables      \
              ate_get_index_with_key \
              ate_get_row_with_key
        )

enable pwb
source <( pwb_sources \
              pwb_exit_on_error     \
              pwb_display_ate_table \
              pwb_show_message      \
              pwb_erase_dims
        )

declare STAT_KEYMAP_ARRAY=(
    e    7
    r    7
)
declare STAT_KEYMAP
pwb declare_keymap STAT_KEYMAP STAT_KEYMAP_ARRAY
pwb_exit_on_error

# This array is used to create other working
# arrays for program execution.  It's easier
# to add here from `man stat(1)` and let the
# script manage taking what it needs.
declare -a STAT_FILE_ATTRIBUTES=(
    F "File type"
    f "Raw mode"
    a "Permission bits"
    A "Permission settings"
    s "size in bytes"
    U "Owner's name"
    G "Owner's group name"
    w "File created"
    x "File access"
    y "File modified"
    z "File status"
    N "Link name"
    # h "Hard-link count"
    # m "Mount point"
    # t "File system type"
    # T "Human-readable file system type"
)

declare MARGIN_COLOR=$'\e[48;2;64;64;64m'
declare VALUE_INDENT="   "
declare STAT_DELIM='|'
declare MISSING_VALUE="n/a"

# Assert assumption that type type will be first
# stat value reported (it's used for identifying
# directories as mime type 'inode/directory').
if [[ "${STAT_FILE_ATTRIBUTES[0]}" != "F" ]]; then
    echo "First file attribute must be 'F'"
    exit 1
fi

get_user_file_colors()
{
    local gufc_tname="$1"
    ate get_array_name "$gufc_tname"
    local -n gufc_tarray="$ATE_VALUE"

    local OIFS="$IFS"
    local IFS="="

    local -a pair
    while read -r -d ":"; do
        pair=( $REPLY )
        if [ "${#pair[@]}" -ne 2 ]; then
            printf 'Suspicious pair "\e[32;1m%s\e[m", "\e[32;1m%s\e[m"\n' "${pair[@]}"
            printf -v tline 'REPLY is \e[33;1m%s\e[m\n' "$REPLY"
            read -n1 -p "$tline"
            continue
        fi
        gufc_tarray+=( "${pair[@]}" )
    done <<< "$LS_COLORS"

    IFS="$OIFS"

    ate index_rows "$gufc_tname"

    sort_func()
    {
        local -n sf_return="$1"
        local -n sf_left="$2"
        local -n sf_right="$3"
        local left_val="${sf_left[0]}"
        local right_val="${sf_right[0]}"

        local -i len_left="${#left_val}"
        local -i len_right="${#right_val}"

        # keep two-letter and glob specs separate:
        if (( len_left==2 && len_right>2 )); then
            sf_return=-1
        elif (( len_left>2 && len_right==2 )); then
            sf_return=1
        # if both on same side of the two-letter border, compare directly:
        elif [[ "$left_val" < "$right_val" ]]; then
            sf_return=-1
        elif [[ "$left_val" == "$right_val" ]]; then
            sf_return=0
        else
            sf_return=1
        fi
    }

    ate sort "$gufc_tname" sort_func
    ate_exit_on_error
    ate reindex_elements "$gufc_tname"
    ate_exit_on_error
}

declare ATTR_TABLE
ate declare ATTR_TABLE 2
ate append_data ATTR_TABLE "${STAT_FILE_ATTRIBUTES[@]}"
ate index_rows ATTR_TABLE

# Supports PWB print callback for showing a file's attributes.
#
# Fill an array with file attributes, alternating elements of name
# and value.  This function should not disturb existing elements of
# the supplied array because report header stuff should have been
# applied earlier.
make_stat_file_report()
{
    local -n msfr_return="$1"
    local statline="$2"

    local -a sarray
    IFS="$STAT_DELIM" read -r -a sarray <<< "$statline"

    local -i index=0
    local value name
    for value in "${sarray[@]}"; do
        ate get_row ATTR_TABLE $(( index++ ))
        name="${ATE_ARRAY[1]}"
        msfr_return+=( "$name" "${VALUE_INDENT}$value" )
    done
}

# Create a format string to use with 'stat' command, taken
# from the STAT_FILE_ATTRIBUTES array/ATTR_TABLE table.
make_stat_format_string()
{
    local -n msf_format="$1"
    local cstat
    local -a aformat

    msf_callback()
    {
        local -n mc_row="$1"
        aformat+=( "%${mc_row[0]}" )
    }

    ate walk_rows ATTR_TABLE msf_callback

    declare IFS="$STAT_DELIM"
    msf_format="${aformat[*]}"
}

# Fill an ATE table with the output of 'stat' applied to the
# list of files in $2.  This content will be interleaved with
# the attributes table that will be used for running 'ate_ls'.
#
# For small directories, this will be slightly (unnoticeably)
# slower, but for large directories, the efficient lookup
# abilities of ATE tables will greatly improve performance.
fill_stats_table()
{
    local tname="$1"
    local -n fst_files="$2"

    ate get_array_name "$tname"
    local -n fst_array="$ATE_VALUE"

    local format
    make_stat_format_string format

    while read -r; do
        fst_array+=( "$REPLY" )
    done < <( stat -L -c "$format" "${fst_files[@]}" )

    ate index_rows "$tname"
}

# Populate the table with information about the files in
# the directory.  This table will be the data source of the
# PWB dialog.
fill_directory_info_table()
{
   local tname="$1"
   local path="$2"

   ate get_array_name "$tname"
   ate_exit_on_error
   local -n fdt_array="$ATE_VALUE"

   local -i mime_index
   local mime_name mime_comment mime_app mime_stats

   local -a dfiles
   dfiles=( "${path}"/* )

   local sttable
   ate declare sttable 1
   fill_stats_table sttable dfiles

   local -i table_index=0

   local file
   for file in "${dfiles[@]}"; do
       mime_name=
       mime_comment="$MISSING_VALUE"
       mime_app="$MISSING_VALUE"

       if ate_mimes get_mime_index_by_filename mime_index "$file"; then
           ate_mimes get_name_by_mime_index mime_name "$mime_index"
           ate_mimes get_comment_by_mime_index mime_comment "$mime_index"
           ate_mimes get_app_by_mime_index mime_app "$mime_index"
       fi

       ate get_row sttable $(( table_index++ ))
       mime_stat="${ATE_ARRAY[0]}"

       local file_type="${mime_stat%%$STAT_DELIM*}"

       # Fix empty mime name, especially if it's a directory
       if [ -z "mime_name" ]; then
           if [ -d "$file" ]; then
               mime_name="inode/directory"
           else
               mime_name="$MISSING_VALUE"
           fi
       fi

       fdt_array+=( "$file" "$mime_stat" "$mime_name" "$mime_comment" "$mime_app" )
   done

   ate index_rows "$tname"
   ate_exit_on_error

   ate get_row_count "$tname"
   ate_exit_on_error
}

#############################
### PWB DISPLAY FUNCTIONS ###
#############################

dd_print_head()
{
    local -i index="$1"
    local dsource="$2"
    local -i char_limit="$3"
    local -n extra="$6"
}

dd_print_details()
{
    local -i index="$1"
    local dsource="$2"
    local -i char_limit="$3"
    local pwb_name="$5"
    local -n extra="$6"

    # Put 'report' in an array before printing to allow
    # discretion in printing if there's not enough room
    # for all the report lines:
    local -a dpd_report

    ate get_row "$dsource" "$index"
    dpd_report+=( "File name" "${VALUE_INDENT}${ATE_ARRAY[0]}" )
    dpd_report+=( "Mime app" "${VALUE_INDENT}${ATE_ARRAY[4]}" )
    dpd_report+=( "Mime type" "${VALUE_INDENT}${ATE_ARRAY[2]}" )
    dpd_report+=( "${VALUE_INDENT}${ATE_ARRAY[3]}" )

    make_stat_file_report dpd_report "${ATE_ARRAY[1]}"

    # Calculate limits
    pwb get_dimensions "$pwb_name"
    pwb_exit_on_error

    local -i left_start=$(( PWB_ASSOC[screen_cols] - PWB_ASSOC[margin_right] + 1 ))
    local -i lines_to_print="${PWB_ASSOC[pager_lines]}"

    # Print dem lines
    printf "$MARGIN_COLOR"

    local -i lines_printed=0
    local cur_line
    for cur_line in "${dpd_report[@]}"; do
        # erase line
        printf $'\e[%dX' "$char_limit"
        printf "%s" "${cur_line:0:$char_limit}"
        if (( ++lines_printed > lines_to_print )); then
            break
        else
            # Position cursor to print the next line:
            printf $'\e[1E\e[%dG' "$left_start"
        fi
    done
    # Erase unprinted lines:
    for (( ; lines_printed < lines_to_print; ++lines_printed )); do
        printf $'\e[%dX\e[1E\e[%dG' "$char_limit" "$left_start"
    done

    printf $'\e[m'
}

dd_print_line()
{
    local -i index="$1"
    local dsource="$2"
    local -i char_limit="$3"
    local -n extra="$6"

    ate get_row "$dsource" "$index"
    local name="${ATE_ARRAY[0]}"
    name="${name##*/}"

    local mime_name="${ATE_ARRAY[2]}"
    local col_on col_off
    if [ "$mime_name" == "inode/directory" ]; then
        :
    fi

    printf -v tline "%s%-*s%s" "$col_on" "$char_limit" "${name:0:$char_limit}" "$col_off"
    printf "%s" "${tline:0:$char_limit}"
}

dd_print_top()
{
    local -i index="$1"
    local -i char_limit="$3"
    local pwb_handle="$5"
    local -n extra="$6"

    pwb get_dimensions "$pwb_handle"

    declare -i rows="${PWB_ASSOC[data_rows]}"
    declare -i cols="${PWB_ASSOC[pager_cols]}"
    declare -i lines="${PWB_ASSOC[margin_top]}"

    declare -i width="${#extra}"
    printf $'\e[K'
    printf $'\e[%dG%s\e[1E\e[%dG' $(( (cols - width) / 2 )) "$extra" "$margin_left"

    printf -v tline "file %d of %d" $(( index+1 )) "$rows"
    width="${#tline}"
    printf $'\e[K'
    printf $'\e[%dG%s\e[1E\e[%dG' $(( (cols - width) / 2 )) "$tline" "$margin_left"
}

dd_open_line()
{
    local file_name="$1"
    local mime_app="$2"
    local pwb_name="$3"

    printf $'\e[2J'

    if [[ "$mime_app" != "$MISSING_VALUE" ]]; then
        if [[ "${mime_app##*.}" == "desktop" ]]; then
            gtk-launch "$mime_app" "$file_name"
        else
            local delim="${mime_app:0:1}"
            mime_app="${mime_app:1}"
            local IFS="$delim"
            local -a app_args=( $mime_app )
            "${app_args[@]}" "$file_name"
        fi
    fi

    printf $'\e[2J'

    pwb print_all "$pwb_name"
}

dd_execute_line()
{
    local keyp="$1"
    local -i index="$2"
    local dsource="$3"
    local pwb_name="$4"

    # Get current line details:
    local -a del_row
    ate get_row "$dsource" "$index"
    local file_name="${ATE_ARRAY[0]}"
    local mime_name="${ATE_ARRAY[2]}"
    local mime_app="${ATE_ARRAY[4]}"

    case "$keyp" in
        $'\e' )
            return 1
            ;;
        $'\cm' )
            dd_open_line "$file_name" "$mime_app" "$pwb_name"
            ;;
        'e' )
            "$EDITOR" "$file_name"
            ;;
    esac
}


# Start a new directory dialog. This should be recursive, so it
# must be complete and reentrant.
launch_directory_dialog()
{
    local path="$1"
    local ftable
    ate declare ftable 5
    ate_exit_on_error

    local -a msg_lines=( "Getting directory contents" )
    local -a msg_dims
    pwb_show_message msg_lines -a msg_dims
    fill_directory_info_table ftable "$path"
    pwb_erase_dims msg_dims

    local -i row_count
    ate get_row_count ftable -v row_count

    ate get_row_count ftable
    ate_exit_on_error
    if (( ATE_VALUE > 0 )); then
        declare -a decargs=(
            ldd_dialog
            ftable
            "$row_count"
            dd_print_line
            -e dd_execute_line
            -r dd_print_details
            -t dd_print_top
            -d path
        )

        local ldd_dialog
        pwb declare "${decargs[@]}"
        pwb_exit_on_error

        pwb get_dimensions ldd_dialog
        pwb_exit_on_error

        # Right margin is half of screen for file details
        declare -i right_margin=$(( PWB_ASSOC[screen_cols] / 2 - 2 ))

        pwb set_margins ldd_dialog 3 "$right_margin" 3 2

        pwb start ldd_dialog -a STAT_KEYMAP
    fi
}



########################
### Execution Starts ###
########################

# Clean up for any exit (deliberate or due to an error).
exit_trap() { pwb restore; }
trap exit_trap EXIT SIGQUIT SIGINT

# Start init so setup messages are displayed on a clean screen
pwb init

# For progress messages
declare -a msg_dims
declare -a msg_lines



# Get user's LS_COLORS to use familiar colors for some file types
declare ucolors
ate declare ucolors 2

msg_lines=( "Loading colors from your LS_COLORS environment variable" )
pwb_show_message msg_lines -a msg_dims
get_user_file_colors ucolors
pwb_erase_dims msg_dims


# Initialze mimes and mime apps tables
msg_lines=( "Loading mime types tables" )
pwb_show_message msg_lines -a msg_dims
ate_mimes init
pwb_erase_dims msg_dims

declare -a app_args
app_args=( man -l )
ate_mimes set_mime_app "application/x-troff-man" app_args
app_args=( chromium --new_window )
ate_mimes set_mime_app "text/markdown" app_args

# Determine what directory we're gonna view
declare start_path="$PWD"
if [ "$#" -gt 0 ]; then
    start_path="$1"
fi


# # Uncomment to debug tables
# ate_survey_tables

launch_directory_dialog "$start_path"
