#!/usr/bin/env bash

enable ate
enable pwb
source <( pwb_sources \
              ate_exit_on_error         \
              pwb_exit_on_error         \
              ate_print_formatted_table \
        )

get_proc_file_contents()
{
    local -n gpfc_target="$1"
    gpfc_target="StArTiNg"
    local path="$2"
    if [ -f "$path" ]; then
        # gpfc_target=$(tr $'\000' $'\n' <$path)
        # gpfc_target=$(<"$path")
        IFS= read -r gpfc_target <"$path"
        if [ "$?" -ne 0 ]; then
            echo "Error reading contents of '${path:5}'"
        fi
    else
        gpfc_target="?"
    fi
}

# Called by get_cur_procs() for each process
get_proc_info()
{
    local -n gpi_array="$1"
    local proc_path="$2"

    local procid="${file:6}"
    local comm cmdline sessid
    get_proc_file_contents cmdline "${proc_path}"/cmdline
    get_proc_file_contents sessid "${proc_path}"/sessionid
    get_proc_file_contents comm "${proc_path}"/comm

    gpi_array=( "$procid" "$comm" "$sessid" "$cmdline" )
}

# Empty, then fill the table's array with the current processes
get_cur_procs()
{
    local gcp_table="$1"
    local gcp_arr_name
    ate get_array_name "$gcp_table" -v gcp_arr_name
    ate_exit_on_error
    local -n gcp_array="$gcp_arr_name"
    gcp_array=()

    local -a proc_contents=( /proc/* )
    local -a curproc
    local file
    for file in "${proc_contents[@]}"; do
        if [[ "$file" =~ /proc/[[:digit:]]+$ ]]; then
            get_proc_info curproc "$file"
            echo "Adding: ${curproc[*]}"
            gcp_array+=( "${curproc[@]}" )
        fi
    done

    ate index_rows "$gcp_table"
    ate_exit_on_error
}

display_print_line()
{
    local -i index="$1"
    local tname="$2"
    local -i char_limit="$3"

    local -a row
    ate get_row "$tname" "$index" -a row
    ate_exit_on_error
    printf -v trow "%5d %-${char_limit}s" "${row[0]}" "${row[1]}"
    printf "${trow:0:$char_limit}"
}

display_print_head()
{
    local -i index="$1"
    local tname="$2"
    local -i char_limit="$3"

    local -a row
    ate get_row "$tname" "$index" -a row
    ate_exit_on_error

    printf -v trow "%5d %-${char_limit}s" "${row[@]:0:4}"
    printf "${trow:0:$char_limit}"
}

display_info()
{
    local -i row_count
    local tname="$1"
    ate get_row_count "$tname" -v row_count
    ate_exit_on_error

    local -a pwb_declare_args=(
        "$tname"
        "$row_count"
        display_print_line
        -t display_print_head
    )

    local di_display
    pwb declare di_display "${pwb_declare_args[@]}"
    pwb_exit_on_error
    pwb set_margins di_display 3 10 0
    pwb start di_display
}

# Establish variable 'proc_list' at global scope
declare proc_table
ate declare proc_table 4
ate_exit_on_error

# Fill table with process' information
get_cur_procs proc_table

pwb init
display_info proc_table
pwb restore


