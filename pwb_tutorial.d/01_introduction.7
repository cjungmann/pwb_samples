.TH introduction 7
.SH INTRODUCING PWB, PAGER WITH BENEFITS
.PP
.B pwb
facilitates building applications that present collections of items
on which various actions can be generated.
.B pwb
decides when and where to print something, but delegates to the
Bash script exactly what is printed, which keys are active, and
what is to be done when the keys are pressed.
.PP
The script associated with this introduction is a minimum viable
.B pwb
application, illustrating the foundation of
.B pwb
development.

.SH BASIC REQUIREMENTS
.PP
Any script using
.B pwb
must implement two features, a
.BR "data source" " and a " "print function" .
.TS
tab(|);
lb lx.
data source|T{
The primary data source must provide the information needed to
print individual lines of content.
The make-up of the data source is up to the developer.
It could be a Bash basic array, a Bash associative array, an
.BR ate " table (" ate " will be introduced later),"
or even an algorithm with no underlying data.
T}

print function|T{
The print function must print a single line of text based on the
data source and an integer index value.
.B pwb
will position the cursor where printing should start, and will
include a character limit value (among other things) in the
arguments to the print function.
T}
.TE
.SH THE FIRST APP
.PP
Let's walk through the first application, implementing the required
.Br "Data Source"  And " Print Function" .

.Ss Establish Data Source
.Pp
We'll Use The Simplest data collection available, the files in the
current working directory.  It can be done in a single statement:

.EX
#!/usr/bin/env bash
# Data source
declare -a FILES=( * )
.EE

.SS Implement the Print Function
.PP
The print function will be called for each line in the content
area of the screen.
.B pwb
positions the cursor before calling, so the print function can simply
start printing.
The function should print every character alloted by the
.B chars_limit
value.
This ensures that any leftover characters are overwritten and that
the highlight extends to the end of the line.
.PP
For this example, we allow
.B pwb
to highlight the selected line by setting the print mode to reverse
video.  This behavior can be overridden with the
.B -h
option of
.BR "pwb declare" ,
allowing an application to apply a custom look for highlighted lines.

.EX
print_line()
{
   local -i index=\(dq\(Do1\(dq
   local ds_name=\(dq\(Do2\(dq
   local -i chars_limit=\(dq\(Do3\(dq

   local -n pl_array=\(dq$ds_name\(dq
   local value=\(dq\(Dopl_array[\(Doindex]}\(dq
   printf \(dq-*s\(dq \(dq\(Do{chars_limit}\(dq \(dq\(Do{value:0:\(Dochars_limit}\(dq
}
.EE

.PP
Notes on the fragment:
.TS
tab(|);
l lx.
Arguments|T{
The print function is called with six arguments.  In this case we are
ignoring unneeded arguments \(Do4 (focus flag), \(Do5 (pwb handle), and
\(Do6 (extra data).
T}

Data access|T{
Access the array by declaring a name-ref variable, then get the
element value according to the index value.
T}
Print the line|T{
To print exactly the right amount of characters, we use the format
string \(dq-*s\(dq for a left-justified string at least
.B chars_limit
characters long.
Using \(dq\(Do{value:0:\(Dochars_limit]\(dq ensures the text is no
longer than
.BR chars_limit .
The combination stretches too-short strings and truncate too-long strings.
T}
.TE
.SH START PWB
.PP
With the resources ready, we can start up
.BR pwb .
While there are many
.B pwb
commands, there are three essential ones that must be executed for
.B pwb
to run:

.EX
enable pwb
pwb declare PHANDLE FILES \(dq\(Do{FILES[*]}\(dq print_line
pwb start PHANDLE
.EE




