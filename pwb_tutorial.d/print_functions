#!/usr/bin/env bash

## BEGIN_DOC
## This script shows how line and margin print functions
## are similar.
##
## The line print function handles its own highlighting.
## It changes foreground and background colors as well
## as changing the case of the selected line.
##
## The print_top() function prints centered text in the
## top margin.  Marginal prints are called to print the
## focus item, so margin print functions can ignore the
## focus argument.
## END_DOC

declare -a DIR_FILES=( * )

# This function is called for every line in the content area.
# It will be called to initialize each line, and will be called
# to change lines' highlighting as the user navigates through
# the rows, so often it will be called to unhighlight one row
# and then to highlight another.
print_line()
{
    # All data sent to print function
    local -i index="$1"
    local data_name="$2"
    local -i chars_limit="$3"
    local -i focus="$4"
    local pwb_name="$5"
    local extra_data="$6"

    # For Bash arrays, use a nameref to access the data,
    local -n pl_data="$data_name"
    # and the appropriate syntax to read the row.
    local line="${pl_data[$index]:0:$chars_limit}"

    # Demo custom highlighting.  Note that this requires
    # the pwb handle to be declared with the -h option.
    # Here, we set not only fore- and back-ground colors,
    # we also change the text to all upper-case.
    if (( focus == 1 )); then
        printf $'\e[48;2;255;255;0;38;2;64;128;255;1m'
        line="${line^^*}"
    fi

    # print data
    printf "%-*s" "$chars_limit" "$line"

    if (( focus == 1 )); then
        # Default foreground, default background, normal intensity:
        printf $'\e[39;49;22m'
    fi
}

# Print given text centered within the defined region,
# returning the cursor to its original position before
# returning.
#
# The function applies highlighting to lines with focus.
# It's important to have called 'pwb handle' with the
# '-h' option to prevent the default reverse video.
center_print()
{
    local text="$1"
    local -i limit="$2"

    # Get length, but restrict to limit
    local -i len="${#text}"
    (( len = len > limit ? limit : len ))

    local -i left=$(( ( limit - len ) / 2 ))

    # erase and fill region background without moving the cursor
    printf $'\e[%dX' "$limit"
    # move cursor to column that centers the text
    printf $'\e[%dC' "$left"
    # print the string
    printf "%s" "${text:0:$len}"
    # return cursor to original position
    printf $'\e[%dD' $(( left + len ))
}

# New function to print (centered) progress information in top margin
print_top()
{
    # retrieve data
    local -i index="$1"
    local -i chars_limit="$3"
    local phandle="$5"

    local -i row_count
    pwb get_data_count "$phandle" -v row_count

    # Setting background color to see printed extent
    printf $'\e[48;2;64;64;64m'

    local -a lines=(
        "Print Functions Script"
        ""
        "Press 'q' to quit."
    )
    # Array element 1 is a generated line
    printf -v lines[1] "Row %d out of %d" $(( index+1 )) "$row_count"

    for line in "${lines[@]}"; do
        center_print "$line" "$chars_limit"
        # move to next line
        printf $'\e[1B'
    done

    # Restore default background color
    printf $'\e[49m'
}

# Function to get length of longest string in an array
get_max_len()
{
    local -n gml_return="$1"
    local -n gml_array="$2"

    local -i curlen

    gml_return=0
    for file in "${gml_array[@]}"; do
        curlen="${#file}"
        (( gml_return = ( curlen > gml_return ? curlen : gml_return ) ))
    done
}

############################
###   EXECUTION BEGINS   ###
############################

enable pwb

# Get screen width to global var for calculating margins and centering
pwb get_dimensions
declare -i SCREEN_COLS="${PWB_ASSOC[screen_cols]}"

# New arguments, -h to disable default highlighting
pwb declare PHANDLE -h DIR_FILES "${#DIR_FILES[*]}" print_line -t print_top

# Calculate size of margins needed to center the content
declare -i maxlen=0 margins=0
get_max_len maxlen DIR_FILES
# Ensure a minimum 'maxlen'
(( maxlen = ( maxlen > 38 ) ? maxlen : 38 ))
declare -i left=$(( ( SCREEN_COLS - maxlen ) / 2 ))
declare -i right=$(( SCREEN_COLS - maxlen - left ))

pwb set_margins PHANDLE 3 "$right" 2 "$left"

pwb start PHANDLE

